@page "/book/{Id:int}"
@using BookBuzz.Models
@using BookBuzz.Services
@inject IBookService BookService
@inject IReviewService ReviewService
@inject NavigationManager NavigationManager

<div class="container mt-4">
    @if (Book == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <div class="row">
            <div class="col-md-4">
                @if (!string.IsNullOrEmpty(Book.CoverImageUrl))
                {
                    <img src="@Book.CoverImageUrl" class="img-fluid rounded" alt="@Book.Title" 
                         style="max-height: 400px; width: 100%; object-fit: cover;"
                         onerror="this.onerror=null; this.src='https://placehold.co/400x600/e9ecef/495057?text=@(Uri.EscapeDataString(Book.Title))'; this.alt='No image available';">
                }
                else
                {
                    <div class="bg-secondary text-white d-flex align-items-center justify-content-center rounded" style="height: 400px;">
                        <span>No Image</span>
                    </div>
                }
            </div>
            <div class="col-md-8">
                <h1>@Book.Title</h1>
                <h4 class="text-muted">by @Book.Author</h4>
                <div class="mb-3">
                    <span class="badge bg-primary">@Book.Genre</span>
                </div>
                <div class="mb-3">
                    @for (int i = 1; i <= 5; i++)
                    {
                        if (i <= Math.Round(Book.AverageRating))
                        {
                            <span class="text-warning fs-4">★</span>
                        }
                        else
                        {
                            <span class="text-secondary fs-4">☆</span>
                        }
                    }
                    <span class="ms-2">(@Book.AverageRating.ToString("F1")) - @Book.Reviews.Count reviews</span>
                </div>
                <p class="lead">@Book.Description</p>
                <button class="btn btn-primary" @onclick="() => ShowReviewForm = !ShowReviewForm">
                    Write a Review
                </button>
                <a href="/" class="btn btn-secondary ms-2">Back to List</a>
            </div>
        </div>

        @if (ShowReviewForm)
        {
            <div class="row mt-4">
                <div class="col-md-8 offset-md-2">
                    <div class="card">
                        <div class="card-header">
                            <h5>Write a Review</h5>
                        </div>
                        <div class="card-body">
                            <EditForm Model="@NewReview" OnValidSubmit="@HandleValidSubmit">
                                <DataAnnotationsValidator />
                                <ValidationSummary />

                                <div class="form-group mb-3">
                                    <label for="reviewerName">Your Name:</label>
                                    <InputText id="reviewerName" @bind-Value="NewReview.ReviewerName" class="form-control" />
                                </div>

                                <div class="form-group mb-3">
                                    <label>Rating:</label>
                                    <div>
                                        @for (int i = 1; i <= 5; i++)
                                        {
                                            var currentRating = i;
                                            <span class="fs-4 me-1" style="cursor: pointer;" @onclick="() => NewReview.Rating = currentRating">
                                                @if (i <= NewReview.Rating)
                                                {
                                                    <span class="text-warning">★</span>
                                                }
                                                else
                                                {
                                                    <span class="text-secondary">☆</span>
                                                }
                                            </span>
                                        }
                                    </div>
                                    <ValidationMessage For="@(() => NewReview.Rating)" />
                                </div>

                                <div class="form-group mb-3">
                                    <label for="comment">Review:</label>
                                    <InputTextArea id="comment" @bind-Value="NewReview.Comment" class="form-control" rows="4" />
                                </div>

                                <button type="submit" class="btn btn-primary">Submit Review</button>
                                <button type="button" class="btn btn-secondary ms-2" @onclick="() => ShowReviewForm = false">Cancel</button>
                            </EditForm>
                        </div>
                    </div>
                </div>
            </div>
        }

        <div class="row mt-4">
            <div class="col-md-12">
                <h3>Reviews</h3>
                @if (!Book.Reviews.Any())
                {
                    <div class="alert alert-info">
                        No reviews yet. Be the first to review this book!
                    </div>
                }
                else
                {
                    @foreach (var review in Book.Reviews)
                    {
                        <div class="card mb-3">
                            <div class="card-header d-flex justify-content-between">
                                <div>
                                    <strong>@review.ReviewerName</strong>
                                    <span class="text-muted ms-2">@review.DateCreated.ToString("MMMM dd, yyyy")</span>
                                </div>
                                <div>
                                    @for (int i = 1; i <= 5; i++)
                                    {
                                        if (i <= review.Rating)
                                        {
                                            <span class="text-warning">★</span>
                                        }
                                        else
                                        {
                                            <span class="text-secondary">☆</span>
                                        }
                                    }
                                </div>
                            </div>
                            <div class="card-body">
                                <p class="card-text">@review.Comment</p>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    private Book? Book { get; set; }
    private Review NewReview { get; set; } = new Review();
    private bool ShowReviewForm { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Book = await BookService.GetBookByIdAsync(Id);
        
        if (Book != null)
        {
            var reviews = await ReviewService.GetReviewsByBookIdAsync(Id);
            Book.Reviews = reviews;
            
            NewReview = new Review { BookId = Id, Rating = 5 };
        }
    }

    private async Task HandleValidSubmit()
    {
        if (Book == null) return;
        
        await ReviewService.AddReviewAsync(NewReview);
        Book.Reviews.Add(NewReview);
        
        // Reset the form
        NewReview = new Review { BookId = Book.Id, Rating = 5 };
        ShowReviewForm = false;
        
        // Force refresh to update average rating display
        StateHasChanged();
    }
}